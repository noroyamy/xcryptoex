import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import time
from threading import Thread
import json
import os
import urllib.parse
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8132157647:AAEKgebdk_Q86DZdbPFncwYqhj7YHmrKj20"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [1376242458]

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏ –∏—Ö –∫—É—Ä—Å—ã

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}
exchange_requests = []

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
ADMINS_FILE = "admins.json"
PAIRS_FILE = "pairs.json"
NETWORKS_FILE = "networks.json"
EXCHANGE_REQUESTS_FILE = "exchange_requests.json"
CASHOUT_REQUESTS_FILE = "cashout_requests.json"

MAIN_ADMIN_ID = 123456789  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
def save_json(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∞—Ö –∏ —Å–µ—Ç—è—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
PAIRS = load_json(PAIRS_FILE)
NETWORKS = load_json(NETWORKS_FILE)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã:", PAIRS)
print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏:", NETWORKS)

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
def get_trading_pairs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."""
    return list(PAIRS.keys())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å Binance
def get_binance_symbols():
    url = "https://api.binance.com/api/v3/exchangeInfo"
    response = requests.get(url)
    data = response.json()
    symbols = []
    for symbol in data['symbols']:
        if symbol['status'] == 'TRADING' and symbol['isSpotTradingAllowed']:
            symbols.append(symbol['symbol'])
    return symbols

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å Binance
def fetch_binance_price(pair):
    try:
        symbol = pair.replace("/", "")
        url = f'https://api.binance.com/api/v3/ticker/price?symbol={symbol}'
        response = requests.get(url)
        data = response.json()
        return float(data['price'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return PAIRS.get(pair, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
def update_exchange_rates():
    while True:
        for pair in PAIRS.keys():
            new_price = fetch_binance_price(pair)
            PAIRS[pair] = new_price
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è {pair}: {new_price}")
        time.sleep(600)  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=update_exchange_rates, daemon=True).start()
@bot.message_handler(commands=["admin"])
def admin_command(message):
    if message.chat.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_panel())
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def get_admin_panel():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")
    )
    markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="add_wallet"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="remove_wallet"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é" –≤ –∫–æ–Ω—Ü–µ
    markup.add(InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main"))

    return markup



# –ö–æ–º–∞–Ω–¥–∞ /admin ‚Äî –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    user_id = str(message.from_user.id)
    admins = load_json(ADMINS_FILE)

    if user_id in admins or user_id == str(ADMIN_IDS[0]):
        bot.send_message(message.chat.id, "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", reply_markup=get_admin_panel(), parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
@bot.callback_query_handler(func=lambda call: call.data == "list_admins")
def list_admins(call):
    admins = load_json(ADMINS_FILE)
    text = "üìÉ <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
    for i, admin_id in enumerate(admins, 1):
        text += f"{i}. <code>{admin_id}</code>\n"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                          parse_mode="HTML", reply_markup=get_admin_panel())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def add_admin_request(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    bot.register_next_step_handler(call.message, add_admin_process)

def add_admin_process(message):
    user_id = str(message.text).strip()
    admins = load_json(ADMINS_FILE)

    if user_id in admins:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.", reply_markup=get_admin_panel())
    else:
        admins.append(user_id)
        save_json(ADMINS_FILE, admins)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.",
                         parse_mode="HTML", reply_markup=get_admin_panel())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def remove_admin_request(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(call.message, remove_admin_process)

def remove_admin_process(message):
    user_id = str(message.text).strip()
    admins = load_json(ADMINS_FILE)

    if user_id in admins:
        admins.remove(user_id)
        save_json(ADMINS_FILE, admins)
        bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω <code>{user_id}</code> —É–¥–∞–ª—ë–Ω.",
                         parse_mode="HTML", reply_markup=get_admin_panel())
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.", reply_markup=get_admin_panel())


# –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –≤—ã–±–æ—Ä –ø–∞—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == "remove_wallet")
def remove_wallet_start(call):
    user_data[call.message.chat.id] = {"step": "remove_pair"}

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç markup –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä
    for pair in PAIRS.keys():
        markup.add(InlineKeyboardButton(pair, callback_data=f"remove_pair_{pair}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)

# –í—ã–±–æ—Ä —Å–µ—Ç–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_pair_"))
def remove_wallet_network(call):
    pair = call.data.split("remove_pair_")[1]
    user_data[call.message.chat.id] = {"pair": pair, "step": "remove_network_wallet"}
    
    wallets = load_json("wallets.json")
    networks = wallets.get(pair, {}).keys()

    if not networks:
        bot.send_message(call.message.chat.id, f"‚ùå –î–ª—è –ø–∞—Ä—ã {pair} –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤.", reply_markup=get_admin_panel())
        return

    markup = InlineKeyboardMarkup()
    for network in networks:
        markup.add(InlineKeyboardButton(network, callback_data=f"remove_network_{network}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="remove_wallet"))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è <b>{pair}</b>:", call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")


# –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_network_"))
def remove_wallet_address(call):
    network = call.data.split("remove_network_")[1]
    chat_id = call.message.chat.id

    if "pair" not in user_data.get(chat_id, {}):
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É.", reply_markup=get_admin_panel())
        return

    pair = user_data[chat_id]["pair"]
    user_data[chat_id]["network"] = network  # üõ† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ç—å!

    wallets = load_json("wallets.json")

    if pair in wallets and network in wallets[pair]:
        addresses = wallets[pair][network]
        if not addresses:
            bot.send_message(chat_id, f"‚ùå –ê–¥—Ä–µ—Å–æ–≤ –¥–ª—è {pair} ({network}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_admin_panel())
            return

        markup = InlineKeyboardMarkup()
        for i, address in enumerate(addresses, 1):
            encoded = urllib.parse.quote(address)
            # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
            markup.add(InlineKeyboardButton(f"–ê–¥—Ä–µ—Å {i}: {address}", callback_data=f"remove_address_{encoded}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="remove_wallet"))

        bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ <b>{pair} ({network})</b>:", parse_mode="HTML", reply_markup=markup)
    else:
        bot.send_message(chat_id, f"‚ùå –ê–¥—Ä–µ—Å–∞ –¥–ª—è <b>{pair} ({network})</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode="HTML", reply_markup=get_admin_panel())

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_address_"))
def confirm_delete_address(call):
    chat_id = call.message.chat.id
    address = urllib.parse.unquote(call.data.split("remove_address_")[1])

    data = user_data.get(chat_id, {})
    pair = data.get("pair")
    network = data.get("network")

    wallets = load_json("wallets.json")

    if pair and network and address in wallets.get(pair, {}).get(network, []):
        wallets[pair][network].remove(address)

        if not wallets[pair][network]:
            del wallets[pair][network]

        if not wallets[pair]:
            del wallets[pair]

        save_json("wallets.json", wallets)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å, –±–µ–∑ —Å–∫–æ–±–æ–∫
        bot.send_message(chat_id, f"‚úÖ –ê–¥—Ä–µ—Å {address} –∏–∑ <b>{pair} ({network})</b> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML", reply_markup=get_admin_panel())
    else:
        bot.send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_panel())

    user_data.pop(chat_id, None)



@bot.callback_query_handler(func=lambda call: call.data == "add_wallet")
def add_wallet_start(call):
    user_data[call.message.chat.id] = {"step": "choose_pair_wallet"}
    markup = InlineKeyboardMarkup()
    for pair in PAIRS.keys():
        markup.add(InlineKeyboardButton(pair, callback_data=f"wallet_pair_{pair}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    bot.edit_message_text("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("wallet_pair_"))
def choose_wallet_network(call):
    pair = call.data.split("wallet_pair_")[1]
    user_data[call.message.chat.id] = {"pair": pair, "step": "choose_network_wallet"}

    networks = NETWORKS.get(pair, [])
    if not networks:
        bot.send_message(call.message.chat.id, "‚ùå –î–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ—Ç —Å–µ—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö.")
        return

    markup = InlineKeyboardMarkup()
    for network in networks:
        markup.add(InlineKeyboardButton(network, callback_data=f"wallet_network_{network}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_wallet"))
    bot.edit_message_text(f"üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–∞—Ä—ã <b>{pair}</b>:", call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith("wallet_network_"))
def ask_wallet_address(call):
    network = call.data.split("wallet_network_")[1]
    if call.message.chat.id not in user_data or "pair" not in user_data[call.message.chat.id]:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_admin_panel())
        return

    user_data[call.message.chat.id]["network"] = network
    bot.send_message(
        call.message.chat.id,
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è <b>{user_data[call.message.chat.id]['pair']} ({network})</b>:",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(call.message, save_wallet_address)

def save_wallet_address(message):
    chat_id = message.chat.id
    address = message.text.strip()
    data = user_data.get(chat_id, {})
    pair = data.get("pair")
    network = data.get("network")

    if not pair or not network or not address:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.", reply_markup=get_admin_panel())
        return

    wallets = load_json("wallets.json")
    wallets.setdefault(pair, {}).setdefault(network, [])

    if address in wallets[pair][network]:
        bot.send_message(chat_id, "‚ö†Ô∏è –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_admin_panel())
    else:
        wallets[pair][network].append(address)
        save_json("wallets.json", wallets)

        bot.send_message(
            chat_id,
            f"‚úÖ –ê–¥—Ä–µ—Å –¥–ª—è <b>{pair} ({network})</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n<code>{address}</code>",
            parse_mode="HTML",
            reply_markup=get_admin_panel()
        )

    user_data.pop(chat_id, None)


@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def start_add_admin(call):
    user_data[call.message.chat.id] = {"step": "waiting_for_admin_id"}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã:", parse_mode="HTML")
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_for_admin_id")
def process_add_admin(message):
    try:
        new_admin_id = str(int(message.text.strip()))  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    admins = load_json(ADMINS_FILE)
    if new_admin_id in admins:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
    else:
        admins.append(new_admin_id)
        save_json(ADMINS_FILE, admins)
        bot.send_message(message.chat.id, f"‚úÖ <b>ID {new_admin_id}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", parse_mode="HTML")

    user_data.pop(message.chat.id, None)




@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def start_remove_admin(call):
    admins = load_json(ADMINS_FILE)

    if not admins:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    for admin_id in admins:
        markup.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"remove_admin_id_{admin_id}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_admin_id_"))
def confirm_remove_admin(call):
    remove_id = call.data.split("remove_admin_id_")[1]
    admins = load_json(ADMINS_FILE)

    if remove_id in admins:
        admins.remove(remove_id)
        save_json(ADMINS_FILE, admins)
        bot.answer_callback_query(call.id, f"‚úÖ ID {remove_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        bot.edit_message_text(f"ID <b>{remove_id}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=get_admin_panel())
    else:
        bot.answer_callback_query(call.id, "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == "back_to_admin")
def back_to_admin(call):
    # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∏ message_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    back_to_admin_panel(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_markup = InlineKeyboardMarkup(row_width=2)
    main_markup.add(
        InlineKeyboardButton("üí± –û–±–º–µ–Ω", callback_data="exchange"),
        InlineKeyboardButton("üíµ –û–±–Ω–∞–ª", callback_data="cashout")
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=main_markup)






@bot.callback_query_handler(func=lambda call: call.data == "stats")
def show_stats(call):
    exchange_data = load_json(EXCHANGE_REQUESTS_FILE)
    cashout_data = load_json(CASHOUT_REQUESTS_FILE)

    exchange_count = len(exchange_data) if isinstance(exchange_data, list) else 0
    cashout_count = len(cashout_data) if isinstance(cashout_data, list) else 0

    wallets = load_json("wallets.json")
    wallet_count = sum(len(networks) for pair, networks in wallets.items())

    stats_text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üîÅ –û–±–º–µ–Ω–æ–≤ –≤—Å–µ–≥–æ: <b>{exchange_count}</b>\n"
        f"üíµ –û–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–π –≤—Å–µ–≥–æ: <b>{cashout_count}</b>\n"
        f"üí≥ –ê–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ: <b>{wallet_count}</b>\n"
    )

    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=get_admin_panel())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start_command(message):
    if message.chat.id in ADMIN_IDS:
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = main_menu()
        bot.send_message(message.chat.id, "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û–±–º–µ–Ω", callback_data="exchange"))
    markup.add(InlineKeyboardButton("–û–±–Ω–∞–ª", callback_data="cashout"))
    return markup

# –ú–µ–Ω—é –æ–±–º–µ–Ω–∞
def exchange_menu():
    markup = InlineKeyboardMarkup()
    for pair in PAIRS.keys():
        markup.add(InlineKeyboardButton(f"{pair} - {PAIRS[pair]} USDT", callback_data=f"pair_{pair}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return markup

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def network_menu(pair):
    markup = InlineKeyboardMarkup()
    for network in NETWORKS.get(pair, []):
        markup.add(InlineKeyboardButton(network, callback_data=f"network_{network}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞—Ä—ã", callback_data="back_to_exchange"))
    return markup

# –û–±–º–µ–Ω - –≤—ã–±–æ—Ä –ø–∞—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == "exchange")
def exchange(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=exchange_menu())

# –û–±–º–µ–Ω - –≤—ã–±–æ—Ä —Å–µ—Ç–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("pair_"))
def select_pair(call):
    pair = call.data.split("_")[1]
    user_data[call.message.chat.id] = {"pair": pair}
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=network_menu(pair))

# –û–±–º–µ–Ω - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == "back_to_exchange")
def back_to_exchange(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=exchange_menu())

# –û–±–º–µ–Ω - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("network_"))
def select_network(call):
    if call.message.chat.id not in user_data:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
        return

    network = call.data.split("_", 1)[1]
    user_data[call.message.chat.id]["network"] = network

    pair = user_data[call.message.chat.id]["pair"]
    wallets = load_json("wallets.json")
    addresses = wallets.get(pair, {}).get(network)

    if not addresses:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏ —Å–µ—Ç–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É.", reply_markup=main_menu())
        return

    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if isinstance(addresses, str):
        address_list = [addresses]
    else:
        address_list = addresses

    if len(address_list) == 1:
        send_wallet_and_confirm(call.message.chat.id, address_list[0])
    else:
        markup = InlineKeyboardMarkup()
        for idx, addr in enumerate(address_list):
            markup.add(InlineKeyboardButton(f"–ê–¥—Ä–µ—Å {idx+1}", callback_data=f"choose_address_{idx}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ user_data
    user_data[call.message.chat.id]["addresses"] = address_list
@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_address_"))
def choose_address(call):
    index = int(call.data.split("_")[2])
    addresses = user_data.get(call.message.chat.id, {}).get("addresses", [])
    
    if 0 <= index < len(addresses):
        send_wallet_and_confirm(call.message.chat.id, addresses[index])
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞.")
def send_wallet_and_confirm(chat_id, address):
    bot.send_message(
        chat_id,
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{address}</code>\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'",
        parse_mode="HTML"
    )

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_exchange"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞—Ä—ã", callback_data="back_to_exchange"))
    bot.send_message(chat_id, "–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...", reply_markup=markup)

# –û–±–º–µ–Ω - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "confirm_exchange")
def confirm_exchange(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:")
    bot.register_next_step_handler(call.message, get_wallet_address)

# –û–±–º–µ–Ω - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
def get_wallet_address(message):
    if message.chat.id not in user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥ –≤ –ø–∞—Ä—ã"
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø–∞—Ä—ã":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=exchange_menu())
        return

    user_data[message.chat.id]["wallet"] = message.text
    bot.send_message(message.chat.id, "‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.", reply_markup=main_menu())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    username = f"@{message.from_user.username}" if message.from_user.username else "‚ùå –ù–µ—Ç username"
    admin_msg = (f"üìå <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω!</b>\n"
                 f"üîπ <b>–ü–∞—Ä–∞:</b> {user_data[message.chat.id]['pair']}\n"
                 f"üîπ <b>–°–µ—Ç—å:</b> {user_data[message.chat.id]['network']}\n"
                 f"üîπ <b>–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{message.text}</code>\n"
                 f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                 f"üÜî <b>User ID:</b> <code>{message.chat.id}</code>\n"
                 f"üîó <a href='tg://user?id={message.chat.id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a>")

    for admin in ADMIN_IDS:
        bot.send_message(admin, admin_msg, parse_mode="HTML")

# –ú–µ–Ω—é –æ–±–Ω–∞–ª–∞
def cashout_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üíµ –í—ã–≤–µ—Å—Ç–∏ –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data="cashout"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return markup

# –û–±–Ω–∞–ª - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "cashout")
def cashout(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    markup.add(InlineKeyboardButton("üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data="enter_cashout_amount"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±–Ω–∞–ª - –≤–≤–æ–¥ —Å—É–º–º—ã
@bot.callback_query_handler(func=lambda call: call.data == "enter_cashout_amount")
def ask_for_amount(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–Ω–∞–ª–∞:", reply_markup=markup)
    bot.register_next_step_handler(call.message, get_cashout_amount)

# –û–±–Ω–∞–ª - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã
def get_cashout_amount(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    try:
        amount = float(message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id] = {"cashout_amount": amount}

        bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu())

        username = f"@{message.from_user.username}" if message.from_user.username else "‚ùå –ù–µ—Ç username"
        admin_msg = (f"üìå <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–Ω–∞–ª!</b>\n"
                     f"üîπ <b>–°—É–º–º–∞:</b> {amount} USDT\n"
                     f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                     f"üÜî <b>User ID:</b> <code>{message.chat.id}</code>\n"
                     f"üîó <a href='tg://user?id={message.chat.id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a>")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin in ADMIN_IDS:
            bot.send_message(admin, admin_msg, parse_mode="HTML")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")))
        bot.register_next_step_handler(message, get_cashout_amount)


bot.polling()
